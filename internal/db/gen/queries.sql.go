// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const completeTask = `-- name: CompleteTask :exec
UPDATE tasks
SET completed = true
WHERE id = ?
`

func (q *Queries) CompleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, completeTask, id)
	return err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, due_date, overdue, completed)
VALUES (?, ?, ?, ?, ?)
RETURNING id
`

type CreateTaskParams struct {
	Title       string
	Description sql.NullString
	DueDate     sql.NullString
	Overdue     sql.NullInt64
	Completed   sql.NullInt64
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Overdue,
		arg.Completed,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, due_date, overdue, completed
FROM tasks
WHERE id = ?
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Overdue,
		&i.Completed,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, description, due_date, overdue, completed
FROM tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.DueDate,
			&i.Overdue,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET title = ?,
    description = ?,
    due_date = ?
WHERE id = ?
`

type UpdateTaskParams struct {
	Title       string
	Description sql.NullString
	DueDate     sql.NullString
	ID          int64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.ID,
	)
	return err
}
